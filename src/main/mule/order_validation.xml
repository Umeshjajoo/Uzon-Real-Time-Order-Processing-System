<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:kafka="http://www.mulesoft.org/schema/mule/kafka" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/kafka http://www.mulesoft.org/schema/mule/kafka/current/mule-kafka.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<flow name="order_validationFlow" doc:id="f9abed99-31a1-4479-89b3-5906cd3b94c8" >
		<kafka:message-listener doc:name="Message listener" doc:id="e308bc06-670c-43d5-a81e-7a0d4aabd18d" config-ref="Apache_Kafka_Consumer_Order_In_configuration" ackMode="MANUAL">
			<redelivery-policy maxRedeliveryCount="3" />
			<reconnect />
		</kafka:message-listener>
		<ee:transform doc:name="Transform Message" doc:id="f2f01d2b-fba2-4425-be34-3ba6e560f510" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
read(payload, "application/json")]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="commitkey" ><![CDATA[%dw 2.0
output application/java
---
attributes.consumerCommitKey]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="4f05e7ce-a806-49fe-b004-3ea14485a28d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload update {
 case .items -> (payload.items groupBy ((value, key) -> value.productId) ) pluck ((value, key) ->
{
      productId: value.productId[0],
      productName: value.productName[0],
      quantity: sum(value.quantity),
      price: value.price[0]
} )
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="Flow Reference" doc:id="e18cdacc-c6a7-46de-bb0e-49009e7e2b6b" name="inventory_fetch_sub_Flow" target="inventoryStatus"/>
		<flow-ref doc:name="Flow Reference" doc:id="1b576756-1daa-4188-82d9-f2cbbef3fdb9" name="order_validation_sub_Flow"/>
		<async doc:name="Async" doc:id="199b3eea-3fa8-492d-9774-722809e8735b" >
			<logger level="INFO" doc:name="Logger" doc:id="14021200-6fdb-4c91-bdd7-39836018399f" message="order Validated" />
		</async>
		<kafka:commit doc:name="Commit" doc:id="f6ebdbdc-de22-46be-bbff-be5d56632f2b" config-ref="Apache_Kafka_Consumer_Order_In_configuration" commitKey="#[vars.commitkey]">
			<reconnect />
		</kafka:commit>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="6cad19bf-0f44-47f7-8250-b64bcbfc5431" type="ANY">
				<ee:transform doc:name="Transform Message" doc:id="6108911f-d1b2-4973-9809-71c45c0dc1b8" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "orderId": payload.orderId,
  "currentStatus": error.description,
  "timeStamp": now() as DateTime
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<kafka:commit doc:name="Commit" doc:id="4cdf6a63-d54d-4f2e-bd47-7f0483388142" config-ref="Apache_Kafka_Consumer_Order_In_configuration" commitKey="#[vars.commitkey]" >
					<reconnect />
				</kafka:commit>
				<kafka:publish doc:name="Publish1" doc:id="d459ebe8-5304-45f0-819b-23d9c6a90ec4" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="dlq-orders" target="InventoryOFS" >
					<reconnect />
				</kafka:publish>
			</on-error-propagate>
		</error-handler>
	</flow>
	<sub-flow name="inventory_fetch_sub_Flow" doc:id="2eacf15d-c6e8-4836-91ae-5c9f67a94d86" >
		<ee:transform doc:name="Transform Message" doc:id="80c1e4fb-7044-41f7-8d41-ecc3d736ccfd">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="ProductIDs"><![CDATA[%dw 2.0
output application/java
---
payload.items.productId joinBy ","]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<db:select doc:name="Select" doc:id="217d828f-5c7f-4f3c-b218-cdd8eb39463b" config-ref="Database_Aiven_Config">
			<db:sql><![CDATA[#['SELECT ProductID,QuantityInStock,IsActive FROM ProductInventory WHERE ProductID IN ($(vars.ProductIDs));']]]></db:sql>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="b36d415b-0ed6-4844-8c59-f3e2d984d94a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload map ( payload01 , indexOfPayload01 ) -> {
	ProductID: payload01.ProductID,
	QuantityInStock: payload01.QuantityInStock,
	IsActive: payload01.IsActive
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
			</ee:variables>
		</ee:transform>
	</sub-flow>
	<sub-flow name="order_validation_sub_Flow" doc:id="eb4cbb8d-de83-4543-be80-9ae0fc56e4f8" >
		<ee:transform doc:name="Transform Message" doc:id="75b82411-6d28-4432-9e6c-9f8f3f69dc29" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="OOSItems" ><![CDATA[%dw 2.0
output application/json
var inv= vars.inventoryStatus
---
flatten(payload.items map ((items, indexs) ->  
     (inv filter ((item, index) -> item.ProductID as String == items.productId and items.quantity > item.QuantityInStock)).ProductID
))  - null joinBy  ","]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="b10e8d0b-48c6-4668-b420-f083fcd708c2" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="validationStatus" ><![CDATA[%dw 2.0
output application/json
var inventory= vars.inventoryStatus
---
payload.items map ((item, index) -> 
{
    "productId": item.productId,
    "isValid" : ((inventory filter(items,values) -> (items.ProductID as String == item.productId and items.IsActive ==1 )).IsActive) != null ,
    "inventoryCheck": ((inventory filter(items,values) -> (items.ProductID as String == item.productId and items.QuantityInStock >= item.quantity)).QuantityInStock) != null,
    "payment" : payload.paymentStatus == "Paid"
}   
)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="70b931b6-3d17-4f93-be9d-a3a2f8c89256" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import every from dw::core::Arrays

output application/json
var validationStatus = vars.validationStatus
---
{
  "orderId": payload.orderId,
  "isValid": (validationStatus.isValid) every (item) -> item == true ,
  "validationDetails": {
    "inventoryCheck": (validationStatus.inventoryCheck) every (item) -> item == true ,
    "paymentCheck": (validationStatus.payment) every (item) -> item == true 
  },
  "validatedDate":  now() as DateTime{format: "yyyy-MM-d HH:MM:ss"}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Choice" doc:id="529f5f17-9c18-4bb2-a77f-ac988fa13c09" >
			<when expression="#[payload.validationDetails.inventoryCheck == false]">
				<kafka:publish doc:name="Publish" doc:id="aec3e742-0bb7-48c1-8348-2f6c6813ef7f" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="dlq-orders" target="InventoryOFS">
					<reconnect />
				</kafka:publish>
				<logger level="INFO" doc:name="Logger" doc:id="d11eda9b-86b8-42f6-8172-f869ea40c94a" message="One of the Item is out of stock"/>
				<ee:transform doc:name="Transform Message" doc:id="5bd4d098-d38d-4fb0-b18e-5cda7de4b3c0">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  "orderId": payload.orderId,
  "currentStatus": "Following Items are out of stock:" ++ vars.OOSItems,
  "timeStamp": now() as DateTime
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<kafka:publish doc:name="Publish1" doc:id="0ddad81b-a64e-48fd-a627-aaddc4487b30" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="order-status" target="publishPayload" />
			</when>
			<when expression="#[payload.validationDetails.paymentCheck == false]" >
				<kafka:publish doc:name="Publish" doc:id="57ad16df-c63f-4df9-8f6c-baa187d2abf2" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="dlq-orders" target="paymentfailed">
					<reconnect />
				</kafka:publish>
				<logger level="INFO" doc:name="Logger" doc:id="a9d96135-a4b1-4045-a828-31636df81924" message="Payment Incomplete"/>
				<ee:transform doc:name="Transform Message" doc:id="69f51eb6-dea4-4809-b9c0-2f2be92e09b4" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "orderId": payload.orderId,
  "currentStatus": "Payment Failed",
  "timeStamp": now() as DateTime
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<kafka:publish doc:name="Publish1" doc:id="28bf2420-9539-4555-9982-97f755cc33aa" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="order-status" target="publishPayload" />
			</when>
			<when expression="#[payload.isValid == false]">
				<kafka:publish doc:name="Publish" doc:id="96d27826-3a81-44e3-98b7-ed7abb6dc6f6" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="dlq-orders" target="Invalid"/>
				<logger level="INFO" doc:name="Logger" doc:id="e1556831-9361-4a22-8009-392da9c5d67b" message="One of the Item is Invalid"/>
				<ee:transform doc:name="Transform Message" doc:id="7fe0f00f-c4b9-48fa-b68a-1c4590baff06" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "orderId": payload.orderId,
  "currentStatus": "Product Invalid",
  "timeStamp": now() as DateTime
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<kafka:publish doc:name="Publish1" doc:id="a589f7c3-e420-425a-afe5-8df3774b82d2" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="order-status" target="publishPayload" />
			</when>
			<otherwise >
				<kafka:publish doc:name="Publish" doc:id="85667863-bb73-4ea9-abef-a8c7d501334e" config-ref="Apache_Kafka_Aiven_Producer_configuration" topic="orders-validated" key="#[payload.orderId]" />
			</otherwise>
		</choice>
	</sub-flow>
</mule>
